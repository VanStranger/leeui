@mixin make-grid-columns($i: 1, $list: ".l-col-xs#{$i}, .l-col-sm#{$i}, .l-col-md#{$i}, .l-col-lg#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .l-col-xs#{$i}, .l-col-sm#{$i}, .l-col-md#{$i}, .l-col-lg#{$i}";
  }
  #{$list} {
    position: relative;
    display: block;
    box-sizing: border-box;
    float: left;
  }
}
@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .l-col-#{$class}#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == offset) {
    .l-col-#{$class}-offset#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}
// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, offset);
}